package com.yingge.qa.service.impl;

import com.yingge.qa.dao.UserRoleRefDAO;
import com.yingge.qa.entity.UserRoleRefDO;
import com.yingge.qa.entity.UserRoleRefDTO;
import com.yingge.qa.entity.UserRoleRefParam.Criteria;
import com.yingge.qa.entity.UserRoleRefParam;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.yingge.qa.controller.UserRoleRefConverter;
import com.yingge.qa.controller.UserRoleRefParameter;
import com.yingge.qa.service.UserRoleRefService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * This class was generated by Ali-Generator
 * @author zhaoxiongy@163.com
 */
@Service
public class UserRoleRefServiceImpl implements UserRoleRefService {
    @Autowired
    private UserRoleRefDAO userRoleRefDAO;

    @Autowired
    private UserRoleRefConverter userRoleRefConverter;

    /**
     * 根据参数统计总数
     * @param param
     */
    @Override
    public long count(UserRoleRefParameter param) {
        UserRoleRefParam userRoleRefParam = new UserRoleRefParam();
        Criteria criteria = userRoleRefParam.createCriteria();
        //TODO 注意：需要根据业务实际情况自行编写WHERE条件
        return userRoleRefDAO.countByParam(userRoleRefParam);
    }

    /**
     * 根据参数查询
     * @param param
     */
    @Override
    public UserRoleRefDTO find(UserRoleRefParameter param) {
        UserRoleRefParam userRoleRefParam = new UserRoleRefParam();
        Criteria criteria = userRoleRefParam.createCriteria();
        //TODO 注意：需要根据业务实际情况自行编写WHERE条件
        List<UserRoleRefDO> list = userRoleRefDAO.selectByParam(userRoleRefParam);
        if (null == list || list.isEmpty()) {
                return null;
        }
        return userRoleRefConverter.convertFromDO(list.get(0));
    }

    /**
     * 列表查询
     * @param param
     */
    @Override
    public List<UserRoleRefDTO> list(UserRoleRefParameter param) {
        UserRoleRefParam userRoleRefParam = new UserRoleRefParam();
        Criteria criteria = userRoleRefParam.createCriteria();
        //TODO 注意：需要根据业务实际情况自行编写WHERE条件
        List<UserRoleRefDO> list = userRoleRefDAO.selectByParam(userRoleRefParam);
        if (null == list || list.isEmpty()) {
                return null;
        }
        List<UserRoleRefDTO> result = new ArrayList<>();
        for (UserRoleRefDO record : list) {
            UserRoleRefDTO userRoleRefDTO = userRoleRefConverter.convertFromDO(record);
                result.add(userRoleRefDTO);
        }
        return result;
    }

    /**
     * 创建
     * @param param
     */
    @Override
    public void create(UserRoleRefParameter param) {
        UserRoleRefDO record = new UserRoleRefDO();
        record.setId(param.getId());
        record.setGmtCreate(new Date());
        record.setGmtModified(new Date());
        record.setIsDelete(param.getIsDelete());
        record.setCreatorId(param.getCreatorId());
        record.setModifierId(param.getModifierId());
        record.setUserId(param.getUserId());
        record.setRoleId(param.getRoleId());
        userRoleRefDAO.insert(record);
    }

    /**
     * 修改
     * @param dto
     * @param param
     */
    @Override
    public void updateSelective(UserRoleRefDTO dto, UserRoleRefParameter param) {
        UserRoleRefDO record = userRoleRefConverter.convertFromDTO(dto);
        record.setGmtModified(new Date());
        UserRoleRefParam userRoleRefParam = new UserRoleRefParam();
        Criteria criteria = userRoleRefParam.createCriteria();
        //TODO 注意：需要根据业务实际情况自行编写WHERE条件
        userRoleRefDAO.updateByParamSelective(record, userRoleRefParam);
    }
}
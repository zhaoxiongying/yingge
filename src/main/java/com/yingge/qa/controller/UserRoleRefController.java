package com.yingge.qa.controller;

import java.util.List;

import com.yingge.qa.entity.UserRoleRefDTO;
import com.yingge.qa.service.UserRoleRefService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

/**
 * This class was generated by Ali-Generator
 * @author zhaoxiongy@163.com
 */
@RestController
@RequestMapping(value = "/UserRoleRef")
public class UserRoleRefController {
    @Autowired
    private UserRoleRefService userRoleRefService;

    /**
     * 根据参数查找
     */
    @ResponseBody
    @GetMapping("/find")
    public UserRoleRefDTO find(@RequestParam(required = false) Long id, @RequestParam(required = false) Byte isDelete, @RequestParam(required = false) Long creatorId, @RequestParam(required = false) Long modifierId, @RequestParam(required = false) Long userId, @RequestParam(required = false) Long roleId) {
        UserRoleRefParameter param = new UserRoleRefParameter();
        param.setId(id);
        param.setIsDelete(isDelete);
        param.setCreatorId(creatorId);
        param.setModifierId(modifierId);
        param.setUserId(userId);
        param.setRoleId(roleId);
        return userRoleRefService.find(param);
    }

    /**
     * 列表查询
     */
    @ResponseBody
    @GetMapping("/list")
    public List<UserRoleRefDTO> list(@RequestParam(required = false) Long id, @RequestParam(required = false) Byte isDelete, @RequestParam(required = false) Long creatorId, @RequestParam(required = false) Long modifierId, @RequestParam(required = false) Long userId, @RequestParam(required = false) Long roleId) {
        UserRoleRefParameter param = new UserRoleRefParameter();
        param.setId(id);
        param.setIsDelete(isDelete);
        param.setCreatorId(creatorId);
        param.setModifierId(modifierId);
        param.setUserId(userId);
        param.setRoleId(roleId);
        return userRoleRefService.list(param);
    }

    /**
     * 创建
     */
    @RequestMapping("/create")
    public void create(@RequestParam(required = false) Long id, @RequestParam(required = false) Byte isDelete, @RequestParam(required = false) Long creatorId, @RequestParam(required = false) Long modifierId, @RequestParam(required = false) Long userId, @RequestParam(required = false) Long roleId) {
        UserRoleRefParameter param = new UserRoleRefParameter();
        param.setId(id);
        param.setIsDelete(isDelete);
        param.setCreatorId(creatorId);
        param.setModifierId(modifierId);
        param.setUserId(userId);
        param.setRoleId(roleId);
        userRoleRefService.create(param);
    }

    /**
     * 修改
     */
    @RequestMapping("/update")
    public void updateSelective(@RequestParam(required = false) Long id, @RequestParam(required = false) Byte isDelete, @RequestParam(required = false) Long creatorId, @RequestParam(required = false) Long modifierId, @RequestParam(required = false) Long userId, @RequestParam(required = false) Long roleId) {
        UserRoleRefDTO dto = new UserRoleRefDTO();
        dto.setId(id);
        dto.setIsDelete(isDelete);
        dto.setCreatorId(creatorId);
        dto.setModifierId(modifierId);
        dto.setUserId(userId);
        dto.setRoleId(roleId);
        UserRoleRefParameter param = new UserRoleRefParameter();
        param.setId(id);
        param.setIsDelete(isDelete);
        param.setCreatorId(creatorId);
        param.setModifierId(modifierId);
        param.setUserId(userId);
        param.setRoleId(roleId);
        userRoleRefService.updateSelective(dto, param);
    }
}
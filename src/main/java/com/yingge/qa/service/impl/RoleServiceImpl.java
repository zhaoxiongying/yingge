package com.yingge.qa.service.impl;

import com.yingge.qa.dao.RoleDAO;
import com.yingge.qa.entity.RoleDO;
import com.yingge.qa.entity.RoleDTO;
import com.yingge.qa.entity.RoleParam.Criteria;
import com.yingge.qa.entity.RoleParam;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.yingge.qa.controller.RoleConverter;
import com.yingge.qa.controller.RoleParameter;
import com.yingge.qa.service.RoleService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * This class was generated by Ali-Generator
 * @author zhaoxiongy@163.com
 */
@Service
public class RoleServiceImpl implements RoleService {
    @Autowired
    private RoleDAO roleDAO;

    @Autowired
    private RoleConverter roleConverter;

    /**
     * 根据参数统计总数
     * @param param
     */
    @Override
    public long count(RoleParameter param) {
        RoleParam roleParam = new RoleParam();
        Criteria criteria = roleParam.createCriteria();
        //TODO 注意：需要根据业务实际情况自行编写WHERE条件
        return roleDAO.countByParam(roleParam);
    }

    /**
     * 根据参数查询
     * @param param
     */
    @Override
    public RoleDTO find(RoleParameter param) {
        RoleParam roleParam = new RoleParam();
        Criteria criteria = roleParam.createCriteria();
        //TODO 注意：需要根据业务实际情况自行编写WHERE条件
        List<RoleDO> list = roleDAO.selectByParam(roleParam);
        if (null == list || list.isEmpty()) {
                return null;
        }
        return roleConverter.convertFromDO(list.get(0));
    }

    /**
     * 列表查询
     * @param param
     */
    @Override
    public List<RoleDTO> list(RoleParameter param) {
        RoleParam roleParam = new RoleParam();
        Criteria criteria = roleParam.createCriteria();
        //TODO 注意：需要根据业务实际情况自行编写WHERE条件
        List<RoleDO> list = roleDAO.selectByParam(roleParam);
        if (null == list || list.isEmpty()) {
                return null;
        }
        List<RoleDTO> result = new ArrayList<>();
        for (RoleDO record : list) {
            RoleDTO roleDTO = roleConverter.convertFromDO(record);
                result.add(roleDTO);
        }
        return result;
    }

    /**
     * 创建
     * @param param
     */
    @Override
    public void create(RoleParameter param) {
        RoleDO record = new RoleDO();
        record.setId(param.getId());
        record.setGmtCreate(new Date());
        record.setGmtModified(new Date());
        record.setIsDelete(param.getIsDelete());
        record.setRoleCode(param.getRoleCode());
        record.setRoleName(param.getRoleName());
        record.setRoleDesc(param.getRoleDesc());
        record.setRoleStatus(param.getRoleStatus());
        record.setIsAdmin(param.getIsAdmin());
        roleDAO.insert(record);
    }

    /**
     * 修改
     * @param dto
     * @param param
     */
    @Override
    public void updateSelective(RoleDTO dto, RoleParameter param) {
        RoleDO record = roleConverter.convertFromDTO(dto);
        record.setGmtModified(new Date());
        RoleParam roleParam = new RoleParam();
        Criteria criteria = roleParam.createCriteria();
        //TODO 注意：需要根据业务实际情况自行编写WHERE条件
        roleDAO.updateByParamSelective(record, roleParam);
    }
}
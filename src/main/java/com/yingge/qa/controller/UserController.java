package com.yingge.qa.controller;

import java.util.List;

import com.yingge.qa.entity.UserDTO;
import com.yingge.qa.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

/**
 * This class was generated by Ali-Generator
 * @author zhaoxiongy@163.com
 */
@RestController
@RequestMapping(value = "/User")
public class UserController {
    @Autowired
    private UserService userService;

    /**
     * 根据参数查找
     */
    @ResponseBody
    @GetMapping("/find")
    public UserDTO find(@RequestParam(required = false) Long id, @RequestParam(required = false) Byte isAdmin, @RequestParam(required = false) String loginName, @RequestParam(required = false) String password, @RequestParam(required = false) String secretKey, @RequestParam(required = false) String mobile, @RequestParam(required = false) String email, @RequestParam(required = false) String sex, @RequestParam(required = false) Byte userStatus, @RequestParam(required = false) Byte isDelete, @RequestParam(required = false) Long creatorId, @RequestParam(required = false) Long modifierId) {
        UserParameter param = new UserParameter();
        param.setId(id);
        param.setIsAdmin(isAdmin);
        param.setLoginName(loginName);
        param.setPassword(password);
        param.setSecretKey(secretKey);
        param.setMobile(mobile);
        param.setEmail(email);
        param.setSex(sex);
        param.setUserStatus(userStatus);
        param.setIsDelete(isDelete);
        param.setCreatorId(creatorId);
        param.setModifierId(modifierId);
        return userService.find(param);
    }

    /**
     * 列表查询
     */
    @ResponseBody
    @GetMapping("/list")
    public List<UserDTO> list(@RequestParam(required = false) Long id, @RequestParam(required = false) Byte isAdmin, @RequestParam(required = false) String loginName, @RequestParam(required = false) String password, @RequestParam(required = false) String secretKey, @RequestParam(required = false) String mobile, @RequestParam(required = false) String email, @RequestParam(required = false) String sex, @RequestParam(required = false) Byte userStatus, @RequestParam(required = false) Byte isDelete, @RequestParam(required = false) Long creatorId, @RequestParam(required = false) Long modifierId) {
        UserParameter param = new UserParameter();
        param.setId(id);
        param.setIsAdmin(isAdmin);
        param.setLoginName(loginName);
        param.setPassword(password);
        param.setSecretKey(secretKey);
        param.setMobile(mobile);
        param.setEmail(email);
        param.setSex(sex);
        param.setUserStatus(userStatus);
        param.setIsDelete(isDelete);
        param.setCreatorId(creatorId);
        param.setModifierId(modifierId);
        return userService.list(param);
    }

    /**
     * 创建
     */
    @RequestMapping("/create")
    public void create(@RequestParam(required = false) Long id, @RequestParam(required = false) Byte isAdmin, @RequestParam(required = false) String loginName, @RequestParam(required = false) String password, @RequestParam(required = false) String secretKey, @RequestParam(required = false) String mobile, @RequestParam(required = false) String email, @RequestParam(required = false) String sex, @RequestParam(required = false) Byte userStatus, @RequestParam(required = false) Byte isDelete, @RequestParam(required = false) Long creatorId, @RequestParam(required = false) Long modifierId) {
        UserParameter param = new UserParameter();
        param.setId(id);
        param.setIsAdmin(isAdmin);
        param.setLoginName(loginName);
        param.setPassword(password);
        param.setSecretKey(secretKey);
        param.setMobile(mobile);
        param.setEmail(email);
        param.setSex(sex);
        param.setUserStatus(userStatus);
        param.setIsDelete(isDelete);
        param.setCreatorId(creatorId);
        param.setModifierId(modifierId);
        userService.create(param);
    }

    /**
     * 修改
     */
    @RequestMapping("/update")
    public void updateSelective(@RequestParam(required = false) Long id, @RequestParam(required = false) Byte isAdmin, @RequestParam(required = false) String loginName, @RequestParam(required = false) String password, @RequestParam(required = false) String secretKey, @RequestParam(required = false) String mobile, @RequestParam(required = false) String email, @RequestParam(required = false) String sex, @RequestParam(required = false) Byte userStatus, @RequestParam(required = false) Byte isDelete, @RequestParam(required = false) Long creatorId, @RequestParam(required = false) Long modifierId) {
        UserDTO dto = new UserDTO();
        dto.setId(id);
        dto.setIsAdmin(isAdmin);
        dto.setLoginName(loginName);
        dto.setPassword(password);
        dto.setSecretKey(secretKey);
        dto.setMobile(mobile);
        dto.setEmail(email);
        dto.setSex(sex);
        dto.setUserStatus(userStatus);
        dto.setIsDelete(isDelete);
        dto.setCreatorId(creatorId);
        dto.setModifierId(modifierId);
        UserParameter param = new UserParameter();
        param.setId(id);
        param.setIsAdmin(isAdmin);
        param.setLoginName(loginName);
        param.setPassword(password);
        param.setSecretKey(secretKey);
        param.setMobile(mobile);
        param.setEmail(email);
        param.setSex(sex);
        param.setUserStatus(userStatus);
        param.setIsDelete(isDelete);
        param.setCreatorId(creatorId);
        param.setModifierId(modifierId);
        userService.updateSelective(dto, param);
    }
}
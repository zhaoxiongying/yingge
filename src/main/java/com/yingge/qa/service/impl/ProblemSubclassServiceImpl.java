package com.yingge.qa.service.impl;

import com.yingge.qa.dao.ProblemSubclassDAO;
import com.yingge.qa.entity.ProblemSubclassDO;
import com.yingge.qa.entity.ProblemSubclassDTO;
import com.yingge.qa.entity.ProblemSubclassParam.Criteria;
import com.yingge.qa.entity.ProblemSubclassParam;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.yingge.qa.controller.ProblemSubclassConverter;
import com.yingge.qa.controller.ProblemSubclassParameter;
import com.yingge.qa.service.ProblemSubclassService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * This class was generated by Ali-Generator
 * @author zhaoxiongy@163.com
 */
@Service
public class ProblemSubclassServiceImpl implements ProblemSubclassService {
    @Autowired
    private ProblemSubclassDAO problemSubclassDAO;

    @Autowired
    private ProblemSubclassConverter problemSubclassConverter;

    /**
     * 根据参数统计总数
     * @param param
     */
    @Override
    public long count(ProblemSubclassParameter param) {
        ProblemSubclassParam problemSubclassParam = new ProblemSubclassParam();
        Criteria criteria = problemSubclassParam.createCriteria();
        //TODO 注意：需要根据业务实际情况自行编写WHERE条件
        return problemSubclassDAO.countByParam(problemSubclassParam);
    }

    /**
     * 根据参数查询
     * @param param
     */
    @Override
    public ProblemSubclassDTO find(ProblemSubclassParameter param) {
        ProblemSubclassParam problemSubclassParam = new ProblemSubclassParam();
        Criteria criteria = problemSubclassParam.createCriteria();
        //TODO 注意：需要根据业务实际情况自行编写WHERE条件
        List<ProblemSubclassDO> list = problemSubclassDAO.selectByParam(problemSubclassParam);
        if (null == list || list.isEmpty()) {
                return null;
        }
        return problemSubclassConverter.convertFromDO(list.get(0));
    }

    /**
     * 列表查询
     * @param param
     */
    @Override
    public List<ProblemSubclassDTO> list(ProblemSubclassParameter param) {
        ProblemSubclassParam problemSubclassParam = new ProblemSubclassParam();
        Criteria criteria = problemSubclassParam.createCriteria();
        //TODO 注意：需要根据业务实际情况自行编写WHERE条件
        List<ProblemSubclassDO> list = problemSubclassDAO.selectByParam(problemSubclassParam);
        if (null == list || list.isEmpty()) {
                return null;
        }
        List<ProblemSubclassDTO> result = new ArrayList<>();
        for (ProblemSubclassDO record : list) {
            ProblemSubclassDTO problemSubclassDTO = problemSubclassConverter.convertFromDO(record);
                result.add(problemSubclassDTO);
        }
        return result;
    }

    /**
     * 创建
     * @param param
     */
    @Override
    public void create(ProblemSubclassParameter param) {
        ProblemSubclassDO record = new ProblemSubclassDO();
        record.setId(param.getId());
        record.setGmtCreate(new Date());
        record.setGmtModified(new Date());
        record.setClassificationName(param.getClassificationName());
        record.setSubclassName(param.getSubclassName());
        record.setRespondent(param.getRespondent());
        problemSubclassDAO.insert(record);
    }

    /**
     * 修改
     * @param dto
     * @param param
     */
    @Override
    public void updateSelective(ProblemSubclassDTO dto, ProblemSubclassParameter param) {
        ProblemSubclassDO record = problemSubclassConverter.convertFromDTO(dto);
        record.setGmtModified(new Date());
        ProblemSubclassParam problemSubclassParam = new ProblemSubclassParam();
        Criteria criteria = problemSubclassParam.createCriteria();
        //TODO 注意：需要根据业务实际情况自行编写WHERE条件
        problemSubclassDAO.updateByParamSelective(record, problemSubclassParam);
    }
}